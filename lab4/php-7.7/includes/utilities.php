<?php
/**
 * üõ†Ô∏è UTILITY FUNCTIONS - C√°c h√†m ti·ªán √≠ch
 */

/**
 * Format ng√†y th√°ng ti·∫øng Vi·ªát
 * @param string $date Ng√†y c·∫ßn format
 * @return string Ng√†y ƒë√£ format
 */
function formatVietnameseDate(string $date): string {
    $timestamp = strtotime($date);
    if ($timestamp === false) return $date;
    
    $days = ['Ch·ªß Nh·∫≠t', 'Th·ª© Hai', 'Th·ª© Ba', 'Th·ª© T∆∞', 'Th·ª© NƒÉm', 'Th·ª© S√°u', 'Th·ª© B·∫£y'];
    $dayOfWeek = $days[date('w', $timestamp)];
    
    return $dayOfWeek . ', ng√†y ' . date('d', $timestamp) . ' th√°ng ' . date('m', $timestamp) . ' nƒÉm ' . date('Y', $timestamp);
}

/**
 * T·∫°o m√£ m√†u ng·∫´u nhi√™n
 * @return string M√£ m√†u hex
 */
function generateRandomColor(): string {
    return '#' . str_pad(dechex(mt_rand(0, 0xFFFFFF)), 6, '0', STR_PAD_LEFT);
}

/**
 * T√≠nh kho·∫£ng c√°ch gi·ªØa 2 ng√†y
 * @param string $startDate Ng√†y b·∫Øt ƒë·∫ßu
 * @param string $endDate Ng√†y k·∫øt th√∫c
 * @return int S·ªë ng√†y
 */
function daysBetween(string $startDate, string $endDate): int {
    try {
        $start = new DateTime($startDate);
        $end = new DateTime($endDate);
        $interval = $start->diff($end);
        return $interval->days;
    } catch (Exception $e) {
        return -1;
    }
}

/**
 * Chuy·ªÉn ƒë·ªïi s·ªë th√†nh ch·ªØ ti·∫øng Vi·ªát
 * @param int $number S·ªë c·∫ßn chuy·ªÉn
 * @return string S·ªë b·∫±ng ch·ªØ
 */
function numberToWords(int $number): string {
    if ($number == 0) return 'kh√¥ng';
    if ($number < 0) return '√¢m ' . numberToWords(abs($number));
    
    $units = ['', 'm·ªôt', 'hai', 'ba', 'b·ªën', 'nƒÉm', 's√°u', 'b·∫£y', 't√°m', 'ch√≠n'];
    $tens = ['', 'm∆∞·ªùi', 'hai m∆∞∆°i', 'ba m∆∞∆°i', 'b·ªën m∆∞∆°i', 'nƒÉm m∆∞∆°i', 
             's√°u m∆∞∆°i', 'b·∫£y m∆∞∆°i', 't√°m m∆∞∆°i', 'ch√≠n m∆∞∆°i'];
    
    if ($number < 10) {
        return $units[$number];
    }
    
    if ($number < 20) {
        return 'm∆∞·ªùi ' . ($number % 10 == 5 ? 'lƒÉm' : $units[$number % 10]);
    }
    
    $result = $tens[floor($number / 10)];
    $unit = $number % 10;
    
    if ($unit > 0) {
        if ($unit == 1) {
            $result .= ' m·ªët';
        } elseif ($unit == 5) {
            $result .= ' lƒÉm';
        } else {
            $result .= ' ' . $units[$unit];
        }
    }
    
    return $result;
}

/**
 * T·∫°o slug t·ª´ chu·ªói
 * @param string $str Chu·ªói c·∫ßn t·∫°o slug
 * @return string Slug
 */
function generateSlug(string $str): string {
    $str = mb_strtolower($str, 'UTF-8');
    $str = preg_replace('/[^a-z0-9\s-]/', '', $str);
    $str = preg_replace('/[\s-]+/', ' ', $str);
    $str = preg_replace('/\s/', '-', $str);
    return $str;
}

/**
 * ƒê·∫øm th·ªùi gian ƒë√£ tr√¥i qua (time ago)
 * @param string $datetime Th·ªùi gian c·∫ßn t√≠nh
 * @return string Chu·ªói th·ªùi gian
 */
function timeAgo(string $datetime): string {
    $time = strtotime($datetime);
    if ($time === false) return 'Th·ªùi gian kh√¥ng h·ª£p l·ªá';
    
    $now = time();
    $diff = $now - $time;
    
    if ($diff < 60) {
        return 'v√†i gi√¢y tr∆∞·ªõc';
    } elseif ($diff < 3600) {
        $minutes = floor($diff / 60);
        return $minutes . ' ph√∫t tr∆∞·ªõc';
    } elseif ($diff < 86400) {
        $hours = floor($diff / 3600);
        return $hours . ' gi·ªù tr∆∞·ªõc';
    } elseif ($diff < 2592000) {
        $days = floor($diff / 86400);
        return $days . ' ng√†y tr∆∞·ªõc';
    } elseif ($diff < 31536000) {
        $months = floor($diff / 2592000);
        return $months . ' th√°ng tr∆∞·ªõc';
    } else {
        $years = floor($diff / 31536000);
        return $years . ' nƒÉm tr∆∞·ªõc';
    }
}

/**
 * Format k√≠ch th∆∞·ªõc file
 * @param int $bytes K√≠ch th∆∞·ªõc t√≠nh b·∫±ng bytes
 * @return string K√≠ch th∆∞·ªõc ƒë√£ format
 */
function formatFileSize(int $bytes): string {
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];
    
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);
    
    $bytes /= pow(1024, $pow);
    
    return round($bytes, 2) . ' ' . $units[$pow];
}

/**
 * T·∫°o m√£ x√°c nh·∫≠n ng·∫´u nhi√™n
 * @param int $length ƒê·ªô d√†i m√£
 * @return string M√£ x√°c nh·∫≠n
 */
function generateVerificationCode(int $length = 6): string {
    $characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $code = '';
    
    for ($i = 0; $i < $length; $i++) {
        $code .= $characters[rand(0, strlen($characters) - 1)];
    }
    
    return $code;
}

/**
 * Ki·ªÉm tra xem c√≥ ph·∫£i l√† ng√†y l√†m vi·ªác kh√¥ng
 * @param string $date Ng√†y c·∫ßn ki·ªÉm tra
 * @return bool True n·∫øu l√† ng√†y l√†m vi·ªác
 */
function isWorkday(string $date): bool {
    $timestamp = strtotime($date);
    if ($timestamp === false) return false;
    
    $dayOfWeek = date('N', $timestamp); // 1 (Monday) to 7 (Sunday)
    return $dayOfWeek >= 1 && $dayOfWeek <= 5; // Monday to Friday
}

/**
 * L·∫•y th√¥ng tin phi√™n b·∫£n PHP
 * @return array Th√¥ng tin PHP
 */
function getPHPInfo(): array {
    return [
        'version' => PHP_VERSION,
        'os' => PHP_OS,
        'memory_limit' => ini_get('memory_limit'),
        'max_execution_time' => ini_get('max_execution_time'),
        'upload_max_filesize' => ini_get('upload_max_filesize')
    ];
}
?>